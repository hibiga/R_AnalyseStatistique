## -------------            Script R Cours 1 - 2018     -- ----------------------	
# R studio , voir page 7 du cours

# Ecritures de script R abordées avec Rcommander: fonctions, arguments, variables, affectation
# Utilisation  de l'aide

# ----------------------------------------------------------------------------------------
# ------  OBJETS R	: vecteurs , matrices, facteurs , listes, dataframe  ---
# ------  FONCTIONS : usage de quelques fonctions predefinies
# -----------------------------------------------------------------------------------------

# Cours 1:  vecteurs, matrices, facteurs,  mécanisme de sélection

# -------------         I Objets R :    VECTEURS             ---------------------------------

# objet le plus élémentaire sous R, calcul vectoriel

# ------------- 		 CREATION , affectation  .   fonctions c seq rep
# affectation. affichage
var=4# sans affichage
var    # affichage
(var=1)  # avec affichage
c("a","z")   # combine, construction d'un vecteur
#? c      # aide sur la fonction
x=c( "a","b","c","z")
x
# ou 
x2<-c( "x","y","z");x2
y=c(1,3,5)	

x;x2;y

length(x)	; mode(x)  # vecteurs de 4 caractères
length(y); mode(y)    # vecteurs de 3 numériques

b=c(TRUE,TRUE,FALSE)
length(b)	; mode(b)  # vecteurs de 3 booléens (ou logique)

c("a",1) # avec conversion des numériques en caractères
mode(c("a",1))

attributes(x)
# pas d'autres attributs que le mode et la longueur

z=3:5
z
length(z)
y
c(y,z)  # combine y et z

seq(1,6,by=0.5)  # seq: sequence, suite	
seq(1,6, length=3)
rep("a",5)	 # rep : repeter
?rep
x
rep(x,4) 	  # 2ème argument : times, non nommé ici
rep(x,each=4)

# ------------    	OPERATIONS VECTORIELLES : terme à terme
# opérations sur les vecteurs: de numériques, de booléens ou de caractères

# -- opérations sur vecteurs de numériques
y
z
y+z	 # somme usuelle de 2 n-uplets de réels,
2*y    # produit usuel par un scalaire
#  opérations classiques sur des n-uplets de réels, vues en math.
#  et aussi :
y*z	 # multiplication de 2 vecteurs !!  :terme à terme  
#        idem pour exposant , terme à terme
z;y	; z^y  
log(y)  # pour chaque terme du vecteur
y>z
y==z  # opérations booleennes;  ==  pour l'égalité 

# mécanisme du recyclage
c(1,2,3,4,5,6)
c(1,2)  
c(1,2,3,4,5,6)+c(1,2)  	
y
y+1    # somme d'un vecteur et d'un nombre: non licite en math
y>2    
y==3  # égalité
y!=3  # difference

# -- opérations sur booléens
b1=c(TRUE,TRUE,FALSE)
b2=c(TRUE,FALSE,FALSE)
b1&b2  # opérateur logique 'et' terme à terme
b1|b2  # opérateur logique 'ou' terme à terme


# -- opérations sur vecteurs de caractères
# concaténation
c1="bon";c2=c("jour")

c1;c2
c(c1,c2)
paste("bon","jour")
paste(c1,c2)
paste(c1,c2,sep="")
# concatenation, terme à terme
d1=c("bon","he");d2=c("jour","llo")
paste(d1,d2,sep="")

# avec recyclage
paste("a",1:4)      # conversion des numériques en caractères 
paste("a",1:4,sep="_")   


# -----------     SELECTION d'élements d'un vecteur
#  ---- sélection avec un indice, un vecteur d'indices
x
x[1]		
x[c(2,3)]	
x[c(1,1,1,2)]

x[1:3]
# Exemple de notes d'éleves 
note=c(12,8,10,12)
prenom=c("alain","bernard","claire","denis")
age=c(5,10,12,15)
note[3]     # selection avec indice
prenom[1:3]    # sélection avec un vecteur d'indices

#   ----  sélection avec un nom ou un vecteur de noms
# la fonction names 
#     *permet de nommer les elements d'un vecteur (!)
#     *ou donne les noms des éléments du vecteur

names(note)
names(note)=c("bleu","blanc","rouge","noir")
note
names(note)
note["blanc"]  # selection avec le nom
note[c("blanc","noir")]  # selection avec un vecteur de noms

#  ---- sélection avec un vecteur de booléens
age>5
prenom[age>5]
note>10
note[note>10]
prenom[note>10]
appreciation=c("B","B","B","I")
# un étudiant est admis si sa note>10 et si il a bonne appréciation

(note>10) & (appreciation=="B")
admis=(note>10) & (appreciation=="B")
admis  # vecteur de booleens qui indique si les étudiants sont admis
prenom[admis]
note[appreciation=="B"]

prenom[-4]
x[-c(1,2)]

prenom 

# ---------     Quelques FONCTIONS prédefinies sur les vecteurs
y
sum(y)
prod(y)
mean(y)
max(y)
var(y)  # avec diviseur (n-1)
sd(y)   # ecart type
range(y)   # intervalle min max

which.max(y)  
?which.max
which.min(note)
prenom[which.min(note)]

admis
sum(admis)   # conversion des booléens TRUE=1 et FALSE=0
sum(admis)/length(admis)   # fréquence des admis



# ------------     I Objets R :           MATRICES           --------------------------
#  tableau à 2 dimensions
A=matrix(c(4,2,3,4,5,2,1,6,3,1,5,3),nrow=3,ncol=4) # matrice de 3 lignes et 4 colonnes
A
attributes(A)  # attribut dimension
dim(A)  # nombre de lignes et nombre de colonnes
length(A);mode(A)  # 12 termes numériques
 
# accés avec indice de ligne et indice de colonne. Commencent à 1
A[2,4]     # terme de ligne 2 et colonne 4

# avec possibilité de sélection multiple 		
A[3,]	 	    # termes de ligne 3, toutes colonnes
A[,2]	      # termes de toutes lignes, colonne 2

A[c(2,3),c(2,3)]  # termes de lignes 2 et 3 et colonnes 2 et 3
A[1:2,]
A[1:2,4]
sum(A)	

M=A[c(2,3),c(2,3)];M
M%*%M
t(M)
det(M)
solve(M)
M%*%solve(M); round(M%*%solve(M))
eigen(M)



# ----------         I Objets R :          FACTEURS           ----------------------------
# pour representer les variables qualitatives
?factor
sexe=factor(c("m","f","f","f")); length(sexe);  sexe
sex=factor(c(1,2,2,2),labels=c("homme","femme"))
length(sex);  sex    # affichage des étiquettes
mode(sexe);mode(sex)
class(sexe);class(sex)
attributes(sexe)
levels(sexe);levels(sex) # ordre alphabétque, ordre des codages numériques
? levels
nlevels(sexe)

is.numeric(sexe); is.numeric(sex)
is.factor(sexe); is.factor(sex)  # permet de distinguer les variables QT et QL


# variable ordinale
? ordered
niveau=ordered(c("AB","B","AB","AB","B","AB"),levels=c("AB","B","TB"))
niveau
is.factor(niveau)
table(niveau)
table(sexe) # ordre alphabétque des modalités
table(sex)   # ordre des codages numériques

factor(niveau)  # garde seulement les modalités présentes dans le vecteur des données
levels(factor(niveau))

# vecteurs de caractères et facteurs
sx=c("m","f","f","f");mode(sx)
is.factor(sx);is.character(sx)
levels(sx)
barplot(table(sexe),main=" graphe avec facteur")
barplot(table(sx), main="graph avec vecteur de caractères")
plot(sexe, main="plot sur facteur")
plot(sx) # plot sur vecteur de caractères ne donne rien


# conversion
x=c(1,2,2,1,2,2);x
is.factor(x)
facx=as.factor(x)  #ou  fac=factor(x)	
is.factor(facx)	
levels(facx)
levels(facx)=c("h","f")			
levels(facx)
mode(facx)
is.numeric(facx)
is.factor(facx)
